// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace ScpmaBe.Repositories.Entities;

public partial class SCPMContext : DbContext
{
    public SCPMContext(DbContextOptions<SCPMContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Area> Areas { get; set; }

    public virtual DbSet<Car> Cars { get; set; }

    public virtual DbSet<Contract> Contracts { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<EntryExitLog> EntryExitLogs { get; set; }

    public virtual DbSet<Feedback> Feedbacks { get; set; }

    public virtual DbSet<Floor> Floors { get; set; }

    public virtual DbSet<Owner> Owners { get; set; }

    public virtual DbSet<ParkingLot> ParkingLots { get; set; }

    public virtual DbSet<ParkingLotPriceHistory> ParkingLotPriceHistories { get; set; }

    public virtual DbSet<ParkingSpace> ParkingSpaces { get; set; }

    public virtual DbSet<ParkingStatusSensor> ParkingStatusSensors { get; set; }

    public virtual DbSet<PaymentContract> PaymentContracts { get; set; }

    public virtual DbSet<Staff> Staff { get; set; }

    public virtual DbSet<TaskEach> TaskEaches { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Area>(entity =>
        {
            entity.ToTable("Area");

            entity.Property(e => e.AreaName)
                .IsRequired()
                .HasMaxLength(256);

            entity.HasOne(d => d.ParkingLot).WithMany(p => p.Areas)
                .HasForeignKey(d => d.ParkingLotId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Area_ParkingLot");
        });

        modelBuilder.Entity<Car>(entity =>
        {
            entity.ToTable("Car");

            entity.Property(e => e.Color).HasMaxLength(64);
            entity.Property(e => e.LicensePlate)
                .IsRequired()
                .HasMaxLength(64);

            entity.Property(e => e.Thumbnail).HasMaxLength(256);
            entity.Property(e => e.Brand).HasMaxLength(64);
            entity.Property(e => e.Model).HasMaxLength(64);
            entity.Property(e => e.RegistedDate).HasColumnType("datetime");

            entity.HasOne(d => d.Customer).WithMany(p => p.Cars)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Car_Customer");
        });

        modelBuilder.Entity<Contract>(entity =>
        {
            entity.ToTable("Contract");

            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Note).HasMaxLength(256);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.Car).WithMany(p => p.Contracts)
                .HasForeignKey(d => d.CarId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Contract_Car");

            entity.HasOne(d => d.ParkingSpace).WithMany(p => p.Contracts)
                .HasForeignKey(d => d.ParkingSpaceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Contract_ParkingSpace");
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.ToTable("Customer");

            entity.Property(e => e.Email).HasMaxLength(64);
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(64);
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(64);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(128);

            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(64);
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(64);

            entity.Property(e => e.Note).HasMaxLength(256);

            entity.Property(e => e.PasswordTemp)
                  .HasMaxLength(128);

            entity.Property(e => e.ActivationCode)
                  .HasMaxLength(32);

            entity.HasOne(d => d.Owner).WithMany(p => p.Customers)
                .HasForeignKey(d => d.OwnerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Customer_Owner");
        });

        modelBuilder.Entity<EntryExitLog>(entity =>
        {
            entity.ToTable("EntryExitLog");

            entity.Property(e => e.EntryTime).HasColumnType("datetime");
            entity.Property(e => e.ExitTime).HasColumnType("datetime");
            entity.Property(e => e.LicensePlate)
                .IsRequired()
                .HasMaxLength(64);
            entity.Property(e => e.EntranceImage).HasColumnType("nvarchar(255)");
            entity.Property(e => e.ExitImage).HasColumnType("nvarchar(255)");
            entity.Property(e => e.PricePerDay).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PricePerHour).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PricePerMonth).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TotalAmount).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.ParkingSpace).WithMany(p => p.EntryExitLogs)
                .HasForeignKey(d => d.ParkingSpaceId)
                .HasConstraintName("FK_EntryExitLog_ParkingSpace");
        });

        modelBuilder.Entity<Feedback>(entity =>
        {
            entity.ToTable("Feedback");

            entity.Property(e => e.DateSubmitted).HasColumnType("datetime");
            entity.Property(e => e.Message)
                .IsRequired()
                .HasMaxLength(256);

            entity.Property(e => e.Status).HasDefaultValue(1);
            entity.Property(e => e.ResponsedContent).HasMaxLength(256);
            entity.Property(e => e.ResponsedAt).HasColumnType("datetime");

            entity.HasOne(d => d.Customer).WithMany(p => p.Feedbacks)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Feedback_Customer");
        });

        modelBuilder.Entity<Floor>(entity =>
        {
            entity.ToTable("Floor");

            entity.Property(e => e.FloorName)
                .IsRequired()
                .HasMaxLength(128);

            entity.HasOne(d => d.Area).WithMany(p => p.Floors)
                .HasForeignKey(d => d.AreaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Floor_Area");
        });

        modelBuilder.Entity<Owner>(entity =>
        {
            entity.ToTable("Owner");

            entity.Property(e => e.Email).HasMaxLength(64);
            entity.Property(e => e.FirstName).HasMaxLength(64);
            entity.Property(e => e.LastName).HasMaxLength(64);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(128);
            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(64);
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(64);
        });

        modelBuilder.Entity<ParkingLot>(entity =>
        {
            entity.ToTable("ParkingLot");

            entity.Property(e => e.Address)
                .IsRequired()
                .HasMaxLength(512);

            entity.Property(e => e.ParkingLotName).HasMaxLength(128);

            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.PricePerDay).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PricePerHour).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PricePerMonth).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.Owner).WithMany(p => p.ParkingLots)
                .HasForeignKey(d => d.OwnerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ParkingLot_Owner");
        });

        modelBuilder.Entity<ParkingLotPriceHistory>(entity =>
        {
            entity.HasKey(e => e.PriceLotPriceHistoryId);

            entity.ToTable("ParkingLotPriceHistory");

            entity.Property(e => e.PriceLotPriceHistoryId).HasColumnName("PriceLotPriceHistoryID");
            entity.Property(e => e.EffectiveDate).HasColumnType("datetime");
            entity.Property(e => e.ParkingLotId).HasColumnName("ParkingLotID");
            entity.Property(e => e.PricePerDay).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PricePerHour).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PricePerMonth).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.ParkingLot).WithMany(p => p.ParkingLotPriceHistories)
                .HasForeignKey(d => d.ParkingLotId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ParkingLotPriceHistory_ParkingLot");
        });

        modelBuilder.Entity<ParkingSpace>(entity =>
        {
            entity.ToTable("ParkingSpace");

            entity.Property(e => e.ParkingSpaceName)
                .IsRequired()
                .HasMaxLength(64);

            entity.HasOne(d => d.Floor).WithMany(p => p.ParkingSpaces)
                .HasForeignKey(d => d.FloorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ParkingSpace_Floor");
        });

        modelBuilder.Entity<ParkingStatusSensor>(entity =>
        {
            entity.ToTable("ParkingStatusSensor");

            entity.HasIndex(e => e.ParkingStatusSensorId, "IX_ParkingStatusSensor").IsUnique();

            entity.Property(e => e.ApiKey)
                .IsRequired()
                .HasMaxLength(128);

            entity.HasOne(d => d.ParkingSpace).WithMany(p => p.ParkingStatusSensors)
                .HasForeignKey(d => d.ParkingSpaceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ParkingStatusSensor_ParkingSpace");
        });

        modelBuilder.Entity<PaymentContract>(entity =>
        {
            entity.ToTable("PaymentContract");

            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Note).HasMaxLength(256);
            entity.Property(e => e.PaymentAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PaymentDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentMethod)
                .IsRequired()
                .HasMaxLength(128);
            entity.Property(e => e.PricePerMonth).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.Contract).WithMany(p => p.PaymentContracts)
                .HasForeignKey(d => d.ContractId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PaymentContract_Contract");
        });

        modelBuilder.Entity<Staff>(entity =>
        {
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(64);
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(64);
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(64);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(128);
            entity.Property(e => e.Phone).HasMaxLength(64);
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(64);
        });

        modelBuilder.Entity<TaskEach>(entity =>
        {
            entity.ToTable("TaskEach");

            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(128);

            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.EndDate).HasColumnType("datetime");

            entity.Property(e => e.Priority);
            entity.Property(e => e.Status);
            
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(256);

            entity.HasOne(d => d.AssignedTo).WithMany(p => p.TaskEachs)
                .HasForeignKey(d => d.AssignedToId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TaskEach_AssignedTo");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}